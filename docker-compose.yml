#version: '3.8'

services:
  web:
    build:
      context: .
    ports:
      - "5000:5000"
    volumes:
      - scraper_data:/data # Named volume for persistent data
    # depends_on: # Not needed for now, but could be added if other services were prerequisites
    restart: unless-stopped
    environment:
      - FLASK_APP=webapp/app.py # Already set in Dockerfile, but can be explicit here too
      - FLASK_RUN_HOST=0.0.0.0 # Ensures Flask listens on all interfaces
      # - FLASK_DEBUG=1 # For development, if not set in app.py or Dockerfile

  filebrowser:
    image: filebrowser/filebrowser:latest
    ports:
      - "8080:80" # Host port 8080 maps to container port 80 (Filebrowser's default HTTP port)
    volumes:
      - scraper_data:/srv # Mount the same named volume to /srv (Filebrowser's default internal data path)
      # Optional: If you had a specific config file:
      # - ./filebrowser_config.json:/config/config.json
    user: root # Running as root to ensure permissions on the volume for now. Simpler for setup.
    environment:
      - FB_PORT=80 # Port Filebrowser listens on inside the container
      - FB_ADDRESS=0.0.0.0 # Listen on all interfaces within the container
      - FB_BASEURL=/filebrowser # Serve Filebrowser under /filebrowser subpath (optional)
      - FB_ROOT=/srv/Web_Scrapes # CRUCIAL: Root directory for Filebrowser to manage.
                                 # This points to the Web_Scrapes folder *inside* the /srv volume mount,
                                 # which corresponds to the path specified by SCRAPER_OUTPUT_DIR for the Python app.
      - FB_DATABASE=/srv/filebrowser.db # Store database in the persistent volume.
      - FB_NOAUTH=true # Disable authentication for easy initial access.
                       # For production, set to false and configure users.
    restart: unless-stopped
    depends_on:
      - web # Optional: wait for web to be healthy if Filebrowser needed to connect to it.
            # Not strictly necessary here as they are independent, but good practice if there's any interaction.

volumes:
  scraper_data: # Define the named volume
    driver: local # Default driver is local
